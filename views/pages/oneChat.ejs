<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat-Application/OneChat</title>
    <link rel="stylesheet" href="/styles/oneChat.css">
</head>
<!-- -----------------------------------------  -->
<style>
        .right-align {
        color: wheat;
        float: right;
        clear: both;
        list-style: none;
        font-size: 20px;
       
        margin: 0.3rem;
    }
    .left-align {
        color: wheat;
        float: left;
        clear: both;
        list-style: none;
        font-size: 20px;
        
        margin: 0.3rem;
    }
    #name {
        color: brown;
    }
</style>
<!-- ---------------------------------------------  -->
<body>
    <header>
        <div class="logo">
            <img src="./images/ChatLogo.png" alt="D Typing">
            <span id="AppName">Lets Chat</span>
        </div>
        <nav>
            <!-- <ul>
                <li><a href="#">Home</a></li>
                <li><a href="#About-Us">About</a></li>
                <li><a href="#Services">Services</a></li>
                <li><a href="#Contact-Us">Contact</a></li>
                <li><a href="#">Explore</a></li>
            </ul> -->
            <div>
                <form action="/chats" method="get">
                    <input type="hidden" name="username" value="<%= username %>">
                    <button class="signbtn" id="backbtn">Back</button>
                </form>
            </div>
            <div>
                <form action="/auth/logout" method="post">
                    <input type="hidden" name="username" value="<%= username %>" />
                    <button class="signbtn" id="loginbtn">Logout</button>
                </form>
            </div>
        </nav>
    </header>
    <!-- --------------------------------------------------------------  -->

    <div class="container">
        <div class="userDetailSection">
            <h1 id="username" style="margin: 10%; font-family: Georgia; color: #fd5e53;"><%= username %></h1> 
            <hr>
            <div>
                <h2 id="userfriend" style="margin: 5% 0 0 10%; font-family: Georgia;"><%= userfriend %></h2>
            </div>
        </div>
        <div class="typingArea">
            <div style="display: flex; justify-content: center;">
                <h1 onclick="pageIncrement()" style="cursor: pointer; color: white;"><<- </h1>
                <h1 id="pageNumber" style="color: white;">1</h1>
                <h1 onclick="pageDecrement()" style="cursor: pointer; color: white;"> >></h1>
            </div> <hr>
            <div class="meassageArea" id="messageBody">
                <ul id="messageList">
                   
                </ul>
            </div>
            <div class="inp-container">
                <form action="/oneChatMsgSend" method="post">
                    <input type="hidden" name="userfriend" value="<%= userfriend %>">
                    <input type="hidden" name="username" value="<%= username %>">
                    <input id="inputArea" type="text" name="newmsg" id="newmsg">
                    <button id="sendbtn" type="submit">Send</button>
                </form>
            </div>
        </div>
    </div>

    <!-- ---------------------------------------------------------------------------------  -->
    <script>
        // --------------- Pagination -----------------
        let pageNumber = 1;  // Initialize pageNumber variable

        const updatePageNumber = () => {
            document.getElementById('pageNumber').textContent = pageNumber;
        };

        const pageDecrement = () => {
            if (pageNumber > 1) {
                pageNumber--;
                updatePageNumber();  // Update the displayed page number
            }
        };

        const pageIncrement = () => {
            if (pageNumber < totalPages) {
                pageNumber++;
                updatePageNumber();  // Update the displayed page number
            }
        };

        const pageSize = 50;  // Adjust the page size as needed
        let totalPages = 10;
        // ------------------ Message ---------------------- 
        const username = document.getElementById('username').innerText;
        console.log(username)
        const userfriend = document.getElementById('userfriend').textContent;
        const messageBody = document.getElementById('messageBody');

        document.addEventListener('DOMContentLoaded', function () {
            const messageList = document.getElementById('messageList');

            const userscred = {
                sendername : username,
                receivername : userfriend
            }
        

            let msgHistory = [];
            let extraMsg = [];
            let flag = true;
            function fetchMessages() {
                fetch('/oneChatPolling', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(userscred),
                    })
                    .then(response => response.json())
                    .then(newmsgHistory => {
                        // updateUI(newMsg(newmsgHistory, msgHistory));
                        // ------------------------------------
                        totalPages = Math.ceil(newmsgHistory.length / pageSize);
                        

                        if (pageNumber == 1) {
                            let isFirstUpdate = true;
                            // updateUI(newMsg(newmsgHistory, msgHistory));
                            if (isFirstUpdate) {
                                if (flag) { 
                                    updateUI(getMessagesForPage(pageNumber, newmsgHistory));
                                    flag = false;
                                } else {
                                    updateUI(newMsg(newmsgHistory, msgHistory));
                                    isFirstUpdate = false; // Set the flag to false after the first update
                                }
                            } else {
                                updateUI(getMessagesForPage(pageNumber, newmsgHistory))
                            }
                        } else {
                            updateUI(getMessagesForPage(pageNumber, newmsgHistory));
                            flag = true;
                        }
                        // --------------------------------------
                        msgHistory = newmsgHistory;
                    })
                    .catch(error => {
                        
                        console.error('Error fetching new messages:', error);
                    });
            }

            // function for getting new message sent
            function newMsg(newmsgHistory, msgHistory) {
                console.log(newmsgHistory.length, msgHistory.length)
                extraMsg = newmsgHistory.slice(msgHistory.length);
                console.log(extraMsg)
                return extraMsg;
            }

            // function for getting message page wise
            function getMessagesForPage(pageNumber, newmsgHistory) {
                const totalMessages = newmsgHistory.length;
                // For page number 1, get the last 10 elements
                if (pageNumber === 1) {
                    const startIndex = Math.max(0, totalMessages - pageSize);
                    const endIndex = totalMessages;
                    return newmsgHistory.slice(startIndex, endIndex);
                } else {
                    const startIndex = Math.max(0, totalMessages - (pageNumber * pageSize));
                    const endIndex = Math.min(totalMessages - ((pageNumber - 1) * pageSize), totalMessages);

                    return newmsgHistory.slice(startIndex, endIndex);
                }
            }

            let first = false;
            // function for displaying messages in ui
            function updateUI(messages) {
                // messageList.innerHTML = '';
                if (pageNumber != 1) {
                    messageList.innerHTML = '';
                    first = true;
                } else {
                    if (first) {
                        messageList.innerHTML = '';
                        first = false;
                    }
                }

                messages.forEach(message => {
                    const li = document.createElement('li');
                    // console.log(username)
                    if (message.sendername == username) {
                        li.textContent = `you : ${message.message}`;
                        li.classList.add('right-align');    
                    } 
                    else {
                        li.textContent = `${message.sendername} : ${message.message}`;
                        li.classList.add('left-align');
                    }
                    messageList.append(li);
                    messageBody.scrollTop = messageBody.scrollHeight;
                    
                });
            }

            setInterval(fetchMessages, 2000);

            fetchMessages();
        });
        // ----------------------------------------------------------- 

    </script>
</body>
</html>